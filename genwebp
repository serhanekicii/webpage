#!/bin/sh

TEMPLDIR=templs
POSTDIR=posts
BUILDDIR=build
PIXDIR=pix
STYLE=style.css
CONF=conf

conf_read() {
    (grep -E "^${2}=" -m 1 "${1}" 2>/dev/null) | head -n 1 | cut -d '=' -f 2-;
}

conf_get() {
    val="$(conf_read "${1}" "${2}")";
    printf -- "%s" "${val}";
}

# pass: variable, config to get value using passed var, file to write
write_values() {
	sed -i "s/\${$1}/$(conf_get $2 $1)/" $3
}

rm -rf build && mkdir build

# create non-post templates
for temp in $TEMPLDIR/*
do
	[ $temp == "$TEMPLDIR/post" ] && continue ||
		[ "${temp: -4}" == "html" ] &&
			cat $temp/*.html > $BUILDDIR/$(basename $temp) &&
			vars=$(grep -Poh '(?<=\{).+?(?=\})' $temp/*.html | sort -u)

		[ "${temp: -3}" == "xml" ] &&
			cat $temp/*.xml > $BUILDDIR/$(basename $temp) &&
			vars=$(grep -Poh '(?<=\{).+?(?=\})' $temp/*.xml | sort -u)

		for var in $vars
		do
			write_values $var $CONF $BUILDDIR/$(basename $temp)
		done
done

for conf in $POSTDIR/*.conf; do
	conf=$(basename $conf)

	# skip if html doesn't exist
	! [ -e $POSTDIR/${conf::-5}.html ] && echo "$conf html file doesn't exist." && continue
	# skip if md is true but markdown file doesn't exist
	[ "$(conf_get $POSTDIR/$conf "md")" = "True" ] && ! [ -e $POSTDIR/${conf::-5}.md ] && echo "$conf md=True but ${conf::-5}.md file doesn't exist." && continue

	post="$(cut -c 5- <<< ${conf::-5}.html)"
	cat $TEMPLDIR/$(conf_get $CONF post_header) >> $BUILDDIR/$post &&
	cat $POSTDIR/${conf::-5}.html >> $BUILDDIR/$post &&
	cat $TEMPLDIR/$(conf_get $CONF post_footer) >> $BUILDDIR/$post

	# write vars in config to posts
	vars=$(grep -Poh '(?<=\{).+?(?=\})' $BUILDDIR/$post | sort -u) &&
	for var in $vars
	do
		value=$(conf_get $POSTDIR/$conf $var)
		[ -z "$value" ] && sed -i "s/\${$var}/$(conf_get $CONF $var)/" $BUILDDIR/$post
		write_values $var $POSTDIR/$conf $BUILDDIR/$post
	done


	# check if post is a markdown
	[ "$(conf_get $POSTDIR/$conf "md")" = "True" ] &&
	MDHTML=$(pandoc $POSTDIR/${conf::-5}.md) &&
	sed -i "/<!-- MARKDOWN -->/r /dev/stdin" <<< "$MDHTML" $BUILDDIR/$post

	# add post to index
	[ "$(conf_get $POSTDIR/$conf "add_index")" != "False" ] &&
	postctime=$(conf_get $POSTDIR/$conf created) &&
	sed -i "/^<!-- POSTS -->/a <li><time datetime=$postctime>${postctime::-15}</time> &ndash; <a href=$post>$(conf_get $POSTDIR/$conf title)</a></li>" $BUILDDIR/index.html

	# add post to rss
	[ "$(conf_get $POSTDIR/$conf "add_rss")" != "False" ] &&
	sed -i "/^<!-- POSTS -->/a <item>\n<title>$(conf_get $POSTDIR/$conf title)</title>\n<guid>https://serhanekici.com/${post:4}</guid>\n<pubDate>$postctime</pubDate>\n<link>https://serhanekici.com/$post</link>\n<description>$(conf_get $POSTDIR/$conf description)</description>\n</item>" $BUILDDIR/rss.xml

done

### add last n git commits to index ###
REPO="https://api.github.com/repos/serhanekicii/webpage"
BRANCH="master"
COMMITS_NUM=7 # Get last "N" number of commits

USERNAME="" # Github username
TOKEN="" # Github Personal Access Token

commit_h=$(curl --silent -u $USERNAME:$TOKEN \
  -H "Accept: application/vnd.github.v3+json" \
  $REPO/commits \
  | jq '.[] | "|\(.commit.author.date)|\(.commit.message)|\(.html_url)|" | gsub("[\n\t]"; "")' \
  | head -$COMMITS_NUM)

# reverse order without tac or tail -r nonsense
commit_h=$(awk '{a[NR]=$0} END {for(i=NR; i>=1; i--) printf("%s\n",a[i]);}' <<< $commit_h)

while read line
do
	date=$(awk -F "|" '{print $2}' <<< $line)

	# convert ISO 8601 date to RSS format
	date=$(date --date="$date" +"%a, %d %b %Y")

	commit_msg=$(awk -F "|" '{print $3}' <<< $line)
	commit_url=$(awk -F "|" '{print $4}' <<< $line)

	sed -i "/^<!-- GIT -->/a <li><time datetime=$date>$date</time> &ndash; <a target=_blank href=$commit_url>$commit_msg</a></li>" $BUILDDIR/index.html

done <<< $commit_h

# copy pixdir and style.css to build
cp -r $PIXDIR $BUILDDIR
cp $STYLE $BUILDDIR
